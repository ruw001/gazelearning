let calibrated = false;
let wg_started = false;
let gc_started = false;
let heatmapInstance = null;
let hm_left = 0;
let hm_top = 0;
let maxH = 0;
let maxW = 0;

// ==============================================================
// Visualization helper functions
// Margin of the visualization figure
const margin = {top: 20, right: 30, bottom: 30, left: 100};
let cog_width;
let cog_height;
let x;
let y;

// ==============================================================
// Global experiment setting
let gazeInfo,
    cogInfo;

// ==============================================================
// confusion detection variables
let frameInterval,
    videoElement,
    canvasElement,
    canvasCtx,
    collectElement,
    collectCtx, // to show face during the data collection
    gazeX = 0,
    gazeY = 0;

const total = 400;
let totalNeutral = total;
let totalConfused = total;
let collecting = 0;
let model_ver = 0;
let reporting = false;
let box_click = false;

// var fastMode = false;

const grid_w = 6,
    grid_h = 4;
let patch_w = 0,
    patch_h = 0;
let gazeX_win = [];
let gazeY_win = [];
let timestamp_win = [];
let confusion_win = [];
let inattention_counter = 0;

let secondCounter = 0;
const inferInterval = 1000; // in micro-second
const updateInterval = 5; // in second

let userInfo;
let cameraId;

let detector = (typeof EKDetector === 'function') ? new EKDetector() : undefined;

let faceLostReported = false;
let lastHiddenTimestamp;
let hiddenReported = false;
// ==============================================================
// constant definition (for better code comprehension)
// possible states of variable collecting
const NOTCOLLECTING = 0;
const CONFUSED = 1;
const NEUTRAL = 2;
// identity of user
const STUDENT = 1;
const TEACHER = 2;
// distinguish the type of data post to confusion(python) server
const COLLECTION = 0; // data collection state
const INFERENCE = 1; // server should predict confusion status
const INCREMENT = 2; // incremental data collection
// Post random gaze or not
const RANDOM = false;
// ==============================================================
// Built-in gaze data examples
// Student(client side) randomly selects one to post every set interval (5s now?)

let GazeX = [
    [234, 247, 253, 244, 235, 240, 248, 256, 261, 272, 273, 263, 243, 254, 425, 569, 740, 867, 853, 870, 864, 844, 848, 839, 842, 848, 854, 850, 844, 836, 823, 822, 828, 831, 675, 554, 394, 253, 232, 243, 254, 258, 267, 257, 248, 235, 216, 218, 227, 235, 199, 214, 223, 229],
    [924, 749, 579, 345, 290, 267, 283, 294, 295, 260, 255, 257, 271, 277, 283, 293, 283, 273, 425, 563, 732, 895, 867, 866, 872, 874, 870, 856, 856, 853, 852, 852, 853, 837, 825, 829, 833, 837, 841, 678, 509, 275, 241, 232, 208, 215, 229, 253, 263, 246, 225, 217, 210, 209, 215],
    [564.534396355353,532.7338496583143,543.806104783599,548.0547608200457,528.2276993166287,481.87872437357635,433.59854214123004,413.6427334851936,354.805284738041,335.4932118451025,317.2111161731207,326.99589977220955,339.35562642369024,339.09813211845096,334.076993166287,336.6519362186788,345.5354897494305,343.34678815489747,344.89175398633256,385.4471070615034,398.70806378132113,401.92674259681087,371.02742596810936,360.85640091116176,369.9974487471526,362.015125284738,342.57430523918,326.7384054669704,265.4547608200455,261.59234624145785,265.96974943052396,281.80564920273343,283.09312072892936,284.766833712984,278.32947608200453,263.1373120728929,258.3736674259681,269.703416856492,276.2695216400911,277.2994988610478,280.6469248291572,272.02086560364467,281.2906605922551,311.54624145785874,263.7810478359909,243.18150341685646,216.27334851936217,206.87480637813212,168.2506605922551,164.64574031890663,182.6703416856492,267.25722095671983,467.9740318906606,489.98979498861047,597.6224145785877,591.9575398633257,594.6612300683371,639.9802277904328,687.3591799544419,770.0148519362187,810.1839635535307,876.1025056947608,947.1709339407746,946.9134396355353,931.4637813211846,941.634806378132,914.4691571753985,887.3035079726651,908.6755353075171,901.46569476082,883.3123462414578,891.2946697038724,924.2539407744873,879.8361731207289,853.0567653758542,825.1186332574032,876.1025056947608,870.4376309794989,859.4941230068338,860.65284738041,888.7197266514806,916.6578587699316,928.6313439635535,932.2362642369021,943.3085193621869,974.3365831435078,960.4318906605922,948.0721640091115,936.6136674259681,943.566013667426,893.3546241457859,811.3426879271071,599.4248747152619,446.4732574031891,304.98013667425965,284.6380865603645,260.3048747152619,263.7810478359909,257.0861958997722,255.7987243735763,239.4478359908884,181.64036446469248,186.2752619589977,217.94706150341688,244.98396355353077,248.975125284738,262.3648291571754,246.01394077448748,234.94168564920273,237.51662870159453,232.6242369020501,252.83753986332573,242.9240091116173,241.63653758542137,252.451298405467,541.3599088838268,355.8352619589977,302.7914350797266,256.6999544419134,270.21840546697035,244.34022779043283,319.013576309795,362.65886104783596,376.56355353075173,361.62888382687925,319.9148063781321,287.599271070615,216.65958997722095,226.83061503416855],
    [546.921875,489.92499999999995,499.07499999999993,490.87812499999995,476.9625,466.09687500000007,459.04374999999993,453.70625000000007,446.84375,443.03125,441.696875,440.74375,439.5999999999999,439.40937500000007,437.3125,431.40312499999993,429.30625,427.2093749999999,425.875,427.2093749999999,428.54374999999993,426.446875,428.1624999999999,430.0687499999999,431.2125,431.9749999999999,434.8343749999999,437.12187499999993,439.40937500000007,440.93437499999993,442.26875000000007,443.603125,444.17500000000007,445.12812500000007,446.08125000000007,446.2718749999999,447.2249999999999,451.0374999999999,458.6624999999999,464.953125,467.8125,470.671875,472.0062499999999,475.8187499999999,486.3031249999999,485.15937499999995,485.921875,485.3499999999999,483.634375,482.68125,481.34687499999995,479.821875,480.39374999999995,480.01249999999993,479.25,477.7249999999999,476.19999999999993,475.4375,474.103125,473.53125,474.484375,473.72187499999995,472.38749999999993,472.38749999999993,472.38749999999993,470.48124999999993,469.3375,468.384375,466.66874999999993,464.3812499999999,463.61875,461.5218749999999,459.42500000000007,457.13749999999993,454.8499999999999,453.8968749999999,456.946875,459.04374999999993,460.5687499999999,462.665625,453.70625000000007,452.9437499999999,451.228125,450.84687500000007,450.46562499999993,451.228125,451.41874999999993,451.9906249999999,452.9437499999999,464.76249999999993,477.53437499999995,488.78125,501.36249999999995,513.9437499999999,528.2406249999999,529.5749999999999,537.7718749999999,543.4906249999999,547.875,555.5,569.2249999999999,576.0875,586,602.203125,611.925,621.45625,630.2249999999999,640.1374999999999,729.159375,768.2375,800.2624999999999,838.959375,887.378125,917.1156250000001,903.390625,903.7718750000001,892.7156249999998,885.28125,873.271875,873.271875,872.128125,871.175,870.03125,869.8406249999999,870.6031249999999,871.175,871.7468749999999,872.890625,872.6999999999999,871.9375,868.6968749999999,866.7906249999999,865.646875,863.9312499999999,862.596875,861.2624999999999,860.5,860.1187499999999,860.3093749999999,860.1187499999999,832.6687499999999,822.375,809.603125,798.9281249999999,789.5875,818.5625,833.05,841.2468749999999,847.346875,852.6843749999999,854.971875,853.828125,844.678125,792.6374999999999,765.5687499999999,746.696875,587.7156249999999,570.1781249999999,570.5593749999999,558.359375,545.015625,538.915625,532.625,527.859375,529.003125,527.096875,528.8125,526.525,519.853125,516.2312499999999,512.8,510.51249999999993,508.415625,505.9375,505.3656249999999,505.3656249999999,505.55625,506.890625,505.9375,505.74687499999993,502.88749999999993,501.93437499999993,498.50312499999995,498.12187499999993,497.359375,496.21562499999993,496.7874999999999,495.64374999999995,496.025,496.21562499999993,496.7874999999999,502.5062499999999,506.12812499999995,509.36875,523.8562499999999,520.234375,530.5281249999999,528.6218749999999,508.98749999999995,496.978125,493.165625,487.446875,486.68437499999993,493.546875,499.265625,500.40937499999995,502.696875,503.65,504.03125,504.79374999999993,504.603125,504.4124999999999,504.4124999999999,505.9375,506.12812499999995,509.55937499999993,511.46562499999993,512.609375,513.753125,515.659375,516.8031249999999,518.1374999999999,519.0906249999999,519.853125,520.234375,520.425,519.28125,518.7093749999999,517.7562499999999,520.234375,520.234375,522.33125,523.4749999999999,524.2375,525,524.61875,524.61875,525.953125,527.2874999999999,528.2406249999999,527.859375,526.7156249999999,526.7156249999999,526.7156249999999,527.2874999999999,528.05,528.43125,529.1937499999999,527.6687499999999,527.2874999999999,532.4343749999999,575.8968749999999,681.884375,838.76875,926.45625,924.1687499999998,938.4656249999998,942.0874999999999,946.471875,946.0906249999998,946.8531249999999,947.234375,946.8531249999999,942.46875,941.3249999999998,938.65625,936.940625,935.4156249999999,935.2250000000001,931.221875,928.9343749999998,926.6468750000001,921.8812500000001,916.5437499999998,912.159375,909.4906250000001,891.190625,885.471875,872.128125,868.315625,855.5437499999999,858.975,860.3093749999999,858.4031249999999,868.315625,875.940625,888.5218750000001,882.0406249999999,885.28125,882.8031250000001,883.9468749999999,886.6156250000001,889.6656249999999,891,896.5281249999998,899.76875,904.1531249999998,901.8656250000001,892.7156249999998,885.471875,521.1875,325.796875,321.41249999999997,325.60625,337.61562499999997]
];
let GazeY = [
    [179, 177, 183, 187, 191, 199, 198, 193, 192, 192, 201, 203, 212, 209, 232, 272, 316, 391, 405, 410, 415, 419, 411, 405, 397, 395, 391, 386, 386, 388, 395, 405, 408, 415, 453, 471, 490, 527, 540, 552, 540, 537, 552, 564, 568, 563, 552, 544, 527, 523, 535, 563, 567, 571],
    [19, 15, 17, 54, 139, 194, 196, 203, 214, 211, 214, 224, 220, 213, 208, 227, 227, 230, 242, 259, 312, 397, 423, 421, 404, 397, 392, 385, 388, 399, 410, 411, 420, 421, 416, 405, 397, 393, 384, 451, 475, 503, 547, 547, 543, 538, 537, 542, 547, 558, 560, 560, 561, 585, 590],
    [414.9576309794988,565.3343052391798,546.6659681093394,503.1494305239179,456.15671981776757,408.0052847380409,363.5875170842824,366.54870159453293,372.2135763097949,371.82733485193614,380.96838268792703,385.3457858769931,385.0882915717539,381.9983599088837,374.40227790432795,370.4111161731206,364.10250569476074,378.90842824601356,391.26815489749424,573.8316173120728,612.1982687927107,583.1014123006833,543.31854214123,509.4580410022778,490.27471526195893,467.2289749430523,465.1690205011389,463.6240546697038,426.41612756264226,435.6859225512528,433.3684738041002,418.82004555808646,406.4603189066058,373.75854214122995,365.00373576309784,361.3988154897493,363.4587699316628,365.6474715261958,367.19243735763087,373.5010478359908,387.01949886104774,385.989521640091,448.818132118451,503.6644191343962,471.73512528473793,478.5587243735762,451.00683371298396,431.95225512528464,397.31927107061495,384.18706150341677,340.67052391799535,411.48145785876983,509.97302961275614,485.63981776765365,383.54332574031883,343.7604555808655,317.3672892938495,262.00601366742586,301.91763097949877,263.4222323462414,270.24583143507965,302.43261958997715,367.19243735763087,390.366924829157,385.3457858769931,382.1271070615033,402.2116628701594,409.0352619589976,401.052938496583,384.83079726651476,374.9172665148063,367.3211845102505,366.29120728929377,451.39307517084274,395.25931662870147,334.2331662870159,364.23125284738035,362.6862870159452,380.58214123006826,388.56446469248283,407.2328018223234,389.07945330296116,394.74432801822314,392.68437357630967,386.11826879271064,372.2135763097949,359.59635535307507,358.05138952164003,372.85731207289285,379.9384054669703,368.737403189066,318.1397722095671,155.53211845102496,58.19927107061494,45.19580865603635,59.35799544419126,56.13931662870149,39.40218678815481,27.299954441913357,-1.5394077448748078,44.03708428246006,160.03826879271062,169.82305239179942,155.53211845102496,188.8776309794988,189.39261958997713,187.0751708428245,194.7999999999999,195.95872437357622,195.701230068337,194.28501138952151,180.76656036446457,183.21275626423682,190.16510250569468,192.09630979498854,366.0337129840546,283.3780410022778,147.93603644646916,176.13166287015935,160.55325740318898,218.10323462414567,123.98906605922542,168.40683371298394,162.87070615034156,148.5797722095671,150.25348519362177,148.70851936218668,148.19353075170835,145.36109339407736],
    [199.46875,139.23125,165.53749999999997,176.78437499999995,178.88124999999997,181.93124999999998,184.98125,186.125,184.98125,184.59999999999997,186.69687499999998,187.45937499999997,188.984375,191.653125,190.890625,189.36562499999997,192.41562499999998,194.5125,197.18124999999998,199.278125,198.70624999999995,201.184375,203.47187499999995,204.234375,206.140625,208.42812499999997,210.90624999999994,210.90624999999994,213.38437499999998,214.90937499999995,215.09999999999997,217.3875,218.53124999999994,218.72187499999995,218.72187499999995,219.48437499999994,219.67499999999995,232.6375,257.99062499999997,278.57812499999994,294.590625,312.509375,335.575,367.409375,444.61249999999995,416.97187499999995,411.82499999999993,408.39375,405.72499999999997,403.05625,400.00624999999997,397.909375,400.57812499999994,400.00624999999997,397.909375,393.525,390.09374999999994,383.80312499999997,377.51249999999993,370.45937499999997,368.93437499999993,367.59999999999997,367.02812499999993,367.02812499999993,367.21874999999994,367.409375,367.409375,367.790625,367.409375,367.02812499999993,368.3625,369.50624999999997,370.65,372.74687499999993,375.415625,375.034375,370.84062499999993,367.790625,363.78749999999997,359.2125,371.03124999999994,375.415625,378.275,380.56249999999994,381.89687499999997,383.23124999999993,383.99375,383.80312499999997,383.23124999999993,371.98437499999994,358.64062499999994,351.778125,348.728125,342.81874999999997,338.62499999999994,334.621875,337.86249999999995,343.58124999999995,352.540625,363.40624999999994,366.8375,368.93437499999993,372.55625,376.36875,382.27812499999993,388.759375,392.38124999999997,394.478125,415.828125,418.49687499999993,418.49687499999993,420.78437499999995,422.30937499999993,427.07499999999993,421.546875,411.44374999999997,407.821875,406.86875,404.77187499999997,406.4875,408.775,409.15624999999994,408.96562499999993,410.10937499999994,411.44374999999997,412.20625,412.20625,411.82499999999993,411.44374999999997,410.87187499999993,410.10937499999994,410.68125,408.58437499999997,406.67812499999997,405.915625,404.009375,403.43749999999994,403.24687499999993,401.91249999999997,401.91249999999997,394.66874999999993,387.23437499999994,379.03749999999997,373.69999999999993,373.89062499999994,388.56874999999997,402.103125,410.68125,416.4,421.165625,420.9749999999999,414.87499999999994,398.48124999999993,386.09062499999993,375.9875,356.92499999999995,279.72187499999995,271.525,259.89687499999997,252.653125,250.55624999999998,244.64687499999997,237.59374999999994,230.54062499999998,227.29999999999995,225.20312499999994,224.63124999999997,219.67499999999995,213.38437499999998,208.61874999999998,206.71249999999998,204.61562499999997,202.51874999999995,202.328125,201.375,199.08749999999998,198.13437499999998,196.99062499999997,196.99062499999997,197.75312499999995,196.79999999999995,198.13437499999998,197.371875,196.22812499999998,197.75312499999995,197.75312499999995,198.325,199.278125,200.421875,201.75624999999997,203.47187499999995,221.39062499999994,235.68749999999994,252.84374999999994,340.15,327.56874999999997,296.496875,295.353125,379.99062499999997,407.821875,413.73124999999993,404.009375,403.24687499999993,381.134375,361.11875,363.40624999999994,365.31249999999994,364.93125,364.74062499999997,362.83437499999997,362.071875,362.83437499999997,363.025,363.78749999999997,365.884375,363.596875,367.02812499999993,370.45937499999997,373.509375,377.51249999999993,380.37187499999993,383.23124999999993,385.32812499999994,385.9,386.66249999999997,387.61562499999997,387.61562499999997,386.09062499999993,382.84999999999997,382.27812499999993,383.42187499999994,384.37499999999994,385.13749999999993,386.471875,387.04374999999993,387.23437499999994,388.94999999999993,389.90312499999993,390.85624999999993,391.80937499999993,390.85624999999993,391.42812499999997,391.80937499999993,391.61875,392.571875,391.42812499999997,391.80937499999993,391.2375,388.94999999999993,387.425,385.13749999999993,383.80312499999997,379.41874999999993,410.87187499999993,439.84687499999995,440.0374999999999,449.37812499999995,452.61875,456.8125,459.0999999999999,459.86249999999995,461.9593749999999,462.15,469.775,472.0625,472.25312499999995,472.25312499999995,471.29999999999995,471.87187499999993,470.34687499999995,468.821875,466.34375,463.29374999999993,460.43437499999993,459.290625,483.69062499999995,480.83124999999995,449.1875,462.15,483.5,462.53125,448.6156249999999,441.37187499999993,427.8375,420.78437499999995,422.69062499999995,421.35624999999993,418.1156249999999,418.1156249999999,414.30312499999997,413.34999999999997,410.10937499999994,407.821875,408.01249999999993,401.34062499999993,400.76875,400.00624999999997,384.946875,379.8,379.8,249.98437499999994,167.0625,146.85625,121.884375,33.24374999999998]
];
let timestamp = [
    undefined,
    undefined,


];

// Generate dumb timestamp for first two examples
let dumbTimestamp = [];
for (let i = 0; i < GazeX[0].length; i+=1) {
    dumbTimestamp.push(i);
}
timestamp[0] = dumbTimestamp;
dumbTimestamp = [];
for (let i = 0; i < GazeX[1].length; i+=1) {
    dumbTimestamp.push(i);
}
timestamp[1] = dumbTimestamp;

timestamp[2].forEach((element, i)=>{
    if (i !== 0) timestamp[2][i] = timestamp[2][i] - timestamp[2][0];
});
timestamp[2][0] = 0; // tensorflow.js could not afford numbers as large as timestamp

timestamp[3].forEach((element, i)=>{
    if (i !== 0) timestamp[3][i] = timestamp[3][i] - timestamp[3][0];
});
timestamp[3][0] = 0; // tensorflow.js could not afford numbers as large as timestamp

GazeX.forEach((array, i) => {GazeX[i] = array.map( x => x/1464*window.innerWidth)} );
GazeY.forEach((array, i) => {GazeY[i] = array.map( y => y/794*window.innerHeight)} );

// ==============================================================
// Modal window
function openModal(modalId) {
    // document.getElementById("backdrop").style.display = "block"
    document.getElementById(modalId).style.display = "block"
    document.getElementById(modalId).className += "show"
}
function closeModal(modalId) {
    // document.getElementById("backdrop").style.display = "none"
    document.getElementById(modalId).style.display = "none"
    document.getElementById(modalId).className += document.getElementById(modalId).className.replace("show", "")
}
// Get the modal
const modal = document.getElementById('dataCollectModal');

// When the user clicks anywhere outside of the modal, close it
// window.onclick = function(event) {
//     if (event.target == modal) {
//         closeModal();
//         systemStart(0);
//     }
// }

// ==============================================================
// DOM elements functionalities
function svgDisplay(event) {
    let svg = document.querySelector("#plotting_svg");

    event.target.value = svg.className === "invisible" ? "Show SVG" : "Hide SVG";
    svg.classList.toggle("invisible");
}

async function changeGC() {
    // change to enabled
    if (document.getElementById("et2").checked) {
        document.getElementById("et1").checked = false;
        document.getElementById("webgazeropts").style.display = 'none';
        if (wg_started) {
            await webgazer.end();
            // closeWebGazer();
            wg_started = false;
        }
        document.getElementById("gazecloudopts").style.display = 'initial';
        gc_started = true;
        if (calibrated)
            document.getElementById("gaze").style.display = 'block';

    } else {
        document.getElementById("gazecloudopts").style.display = 'none';
        GazeCloudAPI.StopEyeTracking();
        gc_started = false;
        document.getElementById("gaze").style.display = 'none';
    }
}

async function changeWG() {
    if (document.getElementById("et1").checked) {
        document.getElementById("et2").checked = false;
        document.getElementById("gazecloudopts").style.display = 'none';
        document.getElementById("gaze").style.display = 'none';
        GazeCloudAPI.StopEyeTracking();
        gc_started = false;
        document.getElementById("webgazeropts").style.display = 'initial';
    } else {
        document.getElementById("webgazeropts").style.display = 'none';
        if (wg_started) {
            await webgazer.end();
            // closeWebGazer();
            wg_started = false;
        }
        document.getElementById("gaze").style.display = 'none';
    }
}

function closeWebGazer() {
    var webgazer_elems = ['webgazerFaceOverlay',
        'webgazerFaceFeedbackBox',
        'webgazerGazeDot',
        'webgazerFaceOverlay',
        'webgazerVideoCanvas'];
    for (var i = 0; i < 5; ++i) {
        try {
            document.getElementById(webgazer_elems[i]).remove();
        } catch (err) {
            console.error('Error caught!', err);
        }
    }
    // webgazer_elems.forEach(elem => document.getElementById(elem).remove());
}

async function beginWG() {
    if (!wg_started) {
        await webgazer.begin();
        wg_started = true;
        document.getElementById("gaze").style.display = 'block';
    }
}

async function endWG() {
    if (wg_started) {
        await webgazer.end();
        // closeWebGazer();
        wg_started = false;
    }
}

function findAbsolutePosition(htmlElement) {
    var x = htmlElement.offsetLeft;
    var y = htmlElement.offsetTop;
    for (var x = 0, y = 0, el = htmlElement;
         el != null;
         el = el.offsetParent) {
        x += el.offsetLeft;
        y += el.offsetTop;
    }
    return {
        "left": x,
        "top": y
    };
}

function PlotGaze(GazeData) {
    /*
        GazeData.state // 0: valid gaze data; -1 : face tracking lost, 1 : gaze uncalibrated
        GazeData.docX // gaze x in document coordinates
        GazeData.docY // gaze y in document coordinates
        GazeData.time // timestamp
    */

    var docx = GazeData.docX;
    var docy = GazeData.docY;

    if (calibrated) {
        // var dataPoint = {
        //     x: docx - hm_left, // x coordinate of the datapoint, a number
        //     y: docy - hm_top, // y coordinate of the datapoint, a number
        //     value: 10 // the value at datapoint(x, y)
        // };
        // heatmapInstance.addData(dataPoint);
    }

    gazeX = docx;//GazeData.GazeX;
    gazeY = docy;//GazeData.GazeY;

    let gaze = document.getElementById("gaze");

    // if (GazeData.state != 0) {
    //     if (gaze.style.display == 'block')
    //         gaze.style.display = 'none';
    // }
    // else {
    //     if (gaze.style.display == 'none')
    //         gaze.style.display = 'block';
    // }

    switch (GazeData.state) {
        case 0:
            // 0: valid gaze data
            // Push valid gaze data
            if (totalConfused === 0 && totalNeutral === 0) {
                gazeX_win.push(gazeX);
                gazeY_win.push(gazeY);
                timestamp_win.push(GazeData.time);
            }
            // Visualize gaze with DOM div element #gaze
            docx -= gaze.clientWidth / 2;
            docy -= gaze.clientHeight / 2;
            gaze.style.left = docx + "px";
            gaze.style.top = docy + "px";
            if (gaze.style.display === 'none')
                gaze.style.display = 'block';
            break;
        case -1:
            // -1 : face tracking lost
            // Hide gaze visualization
            // The value of gazeX/gazeY stays same as last valid gaze
            if (gaze.style.display === 'block')
                gaze.style.display = 'none';
            break;
        case 1:
            // 1 : gaze uncalibrated
            // Hide gaze visualization
            // The value of gazeX/gazeY stays same as last valid gaze
            if (gaze.style.display === 'block')
                gaze.style.display = 'none';
            break;
    }

}

// window.onbeforeunload = function () {
//     webgazer.end();
//     // closeWebGazer();
// }

// Kalman Filter defaults to on. Can be toggled by user.
window.applyKalmanFilter = true;

// Set to true if you want to save the data even if you reload the page.
window.saveDataAcrossSessions = true;

// ==============================================================
// Cookie handler
function getCookie(name) {
    let matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
    ));
    return matches ? decodeURIComponent(matches[1]) : undefined;
}

// =====================Experiment Setting=====================
// Retrieve setting from server
async function fetchSetting() {
    let res = await fetch('/admin/trial', {
        method: 'GET',
    });
    let lectureInfo = await res.json();

    gazeInfo = lectureInfo.setting.gazeinfo;
    cogInfo = lectureInfo.setting.coginfo;
    console.log(`Experiment setting fetched successfully. Gaze: ${gazeInfo ? 'On' : 'Off'}, Cog: ${cogInfo ? 'On' : 'Of'}.`);
}

// ==============================================================
// Camera Selction
// It seems that the user needs to first set the default camera in their browser first…
// The camera selection only enforces the new Camera()
// rather than the GazeCloud, which seems to use the default one.
function selectCamera() {
    if (!navigator.mediaDevices.enumerateDevices) {
        let description = document.getElementById("calibrateDescription");
        description.remove();
        document.querySelector("#calibrateModal .modal-footer").hidden = false;
        return
    }

    navigator.mediaDevices.enumerateDevices()
    .then(devices => {
        devices = devices.filter(device => device.kind === 'videoinput');

        let description = document.getElementById("calibrateDescription");
        switch (devices.length) {
            case 0:
                description.innerText = 'No camera available. Please check your device connection.';
                break;
            case 1:
                description.remove();
                document.querySelector("#calibrateModal .modal-footer").hidden = false;
                break;
            default:
                // More than one camera
                description.innerText = 'Pleases choose the camera you would like to use.';

                let btn = document.createElement('button');
                btn.innerText = 'Confirm';
                btn.classList.add('btn');
                btn.classList.add('btn-primary');
                btn.classList.add('btn-sm');
                btn.onclick = function (event) {
                    cameraId = +Array.from(document.querySelectorAll("input[className='form-check-input']"))
                        .filter(radio => radio.checked)[0]
                        .id.slice(-1);
                    cameraId = devices[cameraId].deviceId;
                    navigator.mediaDevices.getUserMedia({video: {deviceId:cameraId}});
                    event.target.remove();
                    document.querySelector("#calibrateModal .modal-footer").hidden = false;
                }
                description.insertAdjacentElement('afterend', btn);

                devices.forEach( (device, i) => {
                    let radio = document.createElement('div');
                    radio.classList.add('form-check');
                    radio.innerHTML =
                        `<input className="form-check-input" type="radio" name="camera" id="cameraRadio${i}">
                        <label className="form-check-label" htmlFor="cameraRadio${i}">
                        ${device.label}</label>`;
                    description.insertAdjacentElement('afterend', radio);
                });
        }
    })
    .catch(function (err) {
        console.error(err.name + ": " + err.message);
    });
}

// =====================Socket.io=====================
// Socket connection to admin server
const socket = io("/admin", {
    autoConnect: false,
});

// SessionID should've been stored on index.html
const sessionID = sessionStorage.getItem("sessionID");
if (sessionID) {
    socket.auth = { sessionID };
    socket.connect();
}

// [Entry 1] Pre-lecture
socket.on("delay", (delay) => {
    // Change information on modal box
    delay = delay / 1000; // in seconds
    let seconds = Math.floor(delay) % 60;
    delay = (delay - seconds) / 60; // in minutes
    let minutes = Math.floor(delay) % 60;
    delay = (delay - minutes) / 60; // in hours
    let hours = Math.floor(delay);

    if ( (hours === 0 && minutes <= 10) || (seconds < 0) || (minutes < 0) || (hours < 0) ) {
        // Next lecture will start within 10 minutes OR delay is smaller than 0 (late student)
        closeModal("before-lecture-modal");
        // Student will be blocked by next modal dialog
        // [Adaptive] Follow openModal function to see how to adapt to different experiment settings
        if ( gazeInfo ) {
            if (document.getElementById("calibrateModal")) openModal("calibrateModal");
        } else if ( cogInfo ) { // gazeInfo off, cogInfo on
            if (document.getElementById("initModal")) openModal('initModal');
        } else { // no info post
            // do nothing
        }
    } else {
        document.getElementById("countdown-description").innerText = `${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
        // Schedule removal of the modal box
        let countdown = setInterval(() => {
            [hours, minutes, seconds] = document.getElementById("countdown-description").innerText.split(':');
            hours = +hours; minutes = +minutes; seconds = +seconds;

            // countdown is over
            if (hours === 0 && minutes === 10 && seconds === 0) {
                clearInterval(countdown);
                closeModal("before-lecture-modal");
                // Student will be blocked by next modal dialog
                if (document.getElementById("calibrateModal")) openModal("calibrateModal");
            }

            if (seconds === 0) {
                seconds = 59;
                if (minutes === 0 && hours > 0) {
                    minutes = 59;
                    hours = hours - 1;
                } else {
                    minutes = minutes - 1;
                }
            } else {
                seconds = seconds - 1;
            }
            document.getElementById("countdown-description").innerText = `${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
        }, 1000);
    }
});
